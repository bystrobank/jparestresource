<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg-flat.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <link rel="stylesheet" type="text/css" href="/oooxhtml/oooxhtml.css"/>
    <style type="text/css">@page {margin-top:2cm;margin-bottom:2cm;margin-left:2cm;margin-right:2cm;}</style>
    <title>Как написать web-приложение</title>
    <meta name="generator" content="oooxhtml/1.2"/>
    <meta name="keywords" content="webapp howto"/>
    <meta name="HeadURL" content="$HeadURL$"/>
  </head>
  <body>
    <div class="container text">
      <h1 id="kak_napisat__Java_web-prilozenie">
        <a class="anchor" href="#kak_napisat__Java_web-prilozenie">Как написать Java web-приложение</a>
      </h1>
      <p>
        <span class="Citation">One WAR to package them all, One WAR to serve them all,<br/>One WAR to deploy them all and in JNDI bind them. </span>
      </p>
      <h2 id="kak_sozdat__Maven-proekt_iz_arhetipa">
        <a class="anchor" href="#kak_sozdat__Maven-proekt_iz_arhetipa">Как создать Maven-проект из архетипа</a>
      </h2>
      <p>Создать проект Netbeans: File - New Project. На 1 шаге выбрать Maven - Project from Archetype. На 2 шаге в строку поиска ввести <i>jparestresource</i> и выбрать jparestresource-archetype (должен быть настроен <a href="../../../mavenlibs/trunk/.m2/settings.xml">~/.m2/settings.xml</a>) На 3 шаге заполняем Project Name, Project Location, GroupId. <i>Важно: параметры Group Id и Packages должны совпадать.</i></p>
      <p>После создания проекта получается готовое к запуску приложение. Скрипт для создания БД лежит в {Other sources}/src/main/resources/META-INF/sql/schema.sql. Данный скрипт создает схему и одноименного пользователя в БД mysql. </p>
      <h2 id="struktura_maven-proekta">
        <a class="anchor" href="#struktura_maven-proekta">Структура maven-проекта</a>
      </h2>
      <p>Созданный Maven-проект разделен в интерфейсе на группы: Web Pages, Source Packages и т.д. </p>
      <ol>
        <li>
          <p>Web Pages - корень резвернутого web-приложения, здесь размещаются контекст приложения META-INF/context.xml дескриптор приложения WEB-INF/web.xml, статические ресурсы - schemas, stylesheets, jsp-страницы и др. </p>
        </li>
        <li>
          <p>RESTful Web Services - дерево JAX-RS ресурсов приложения, строиться Netbeans по аннотациям классов </p>
        </li>
        <li>
          <p>Source Packages - исходный код приложения </p>
        </li>
        <li>
          <p>Test Packages - автотесты </p>
        </li>
        <li>
          <p>Other Sources - ресурсы приложения (содержимое src/main/resources при сборке war попадает в WEB-INF/classes и доступно в classpath) </p>
        </li>
        <li>
          <p>Generated Sources - сгенерированные по схемам и wadl классы и интерфейсы приложения </p>
        </li>
        <li>
          <p>Dependencies - подключенные библиотеки (зависимости) </p>
        </li>
        <li>
          <p>Java Dependencies - системные зависимости </p>
        </li>
        <li>
          <p>Project Files - файлы проекта, самый интересный из них - pom.xml </p>
        </li>
      </ol>
      <p>Не все группы появляются сразу: RESTful Web Services, Test Packages, Other Sources, Generated Sources появляются при добавлении функционала в проект. </p>
      <h2 id="kak_dobavit__zavisimosti_k_Maven_proektu">
        <a class="anchor" href="#kak_dobavit__zavisimosti_k_Maven_proektu">Как добавить зависимости к Maven проекту</a>
      </h2>
      <p>Чтобы добавить зависимость нужно щелкнуть правой кнопкой мыши на группе Dependencies в проекте и выбрать Add Dependency. Откроектся окошко, где в поле Query нужно ввести имя артефакта для поиска. </p>
      <p>Если нужна документация по API какой либо библиотеки в подсказках по Ctrl-пробел, нужно щелкнуть правой кнопкой мыши на библиотеке и скачать javadoc. После загрузки javadoc на баночке с зависимостями появиться буква J: . Там же можно скачать исходный код библиотеки. Отдельно стоит зависимость javaee-web-api. Если посмотреть ее свойства (Properties в контестном меню) или в файле pom.xml (в группе Project Files), видно что даная зависимость имеет свойство scope: provided. Это означает что данная библиотека уже предоставляется сервлет-контейнером (в частности tomcat) и не попадает в war файл. </p>
      <h2 id="modelirovanie_JPA_modeli">
        <a class="anchor" href="#modelirovanie_JPA_modeli">Моделирование JPA модели</a>
      </h2>
      <p>Описать сущности и взаимосвязи между ними. См. <a href="smb://jeddict.github.io/page.html%3Fl=tutorial/QuickStart#CE">https://jeddict.github.io/page.html?l=tutorial/QuickStart#CE</a></p>
      <p>Наиболее часто используемые связи</p>
      <h3 id="mnogo-k-odnomu">
        <a class="anchor" href="#mnogo-k-odnomu">Много-к-одному</a>
      </h3>
      <p>M:1 — наиболее частая связь между сущностями. Может быть односторонней и двухсторонней. Отличие двухсторонней связи заключается в том, что одновременно создается обратная связь 1:M.</p>
      <h3 id="mnogo-ko-mnogim">
        <a class="anchor" href="#mnogo-ko-mnogim">Много-ко-многим</a>
      </h3>
      <p style="font-style:italic;">Как правило, связь М:М не примяется. Технически данная связь реализуется через таблицу-связку, но в данную связку нельзя добавлять собственные свойства. Данную связь можно заменить двумя связями много-к-одному.</p>
      <h3 id="odin-ko-mnogim">
        <a class="anchor" href="#odin-ko-mnogim">Один-ко-многим</a>
      </h3>
      <p style="font-style:italic;">Как правило, односторонная связь 1:M не применяется. Наиболее часто используется двух-сторонняя связь M:1.</p>
      <h3 id="nasledovanie">
        <a class="anchor" href="#nasledovanie">Наследование</a>
      </h3>
      <p>Как правило при разработке модели предметной области выделяются сущности, имеющие одинаковые базовые сущности. </p>
      <h2 id="rabota_s_JDBC">
        <a class="anchor" href="#rabota_s_JDBC">Работа с JDBC</a>
      </h2>
      <h3 id="kak_podklycit__JDBC_resurs_v_proekt">
        <a class="anchor" href="#kak_podklycit__JDBC_resurs_v_proekt">Как подключить JDBC ресурс в проект</a>
      </h3>
      <p>JDBC ресурсы могут быть описаны в самом приложении в файле {Web pages}/META-INF/context.xml, в файле ${CATALINA_BASE}/conf/context.xml и в блоке GlobalNamingResources файла ${CATALINA_BASE}/conf/server.xml. Отличие ${CATALINA_BASE}/conf/context.xml от ${CATALINA_BASE}/conf/server.xml в том, что context.xml перечитываетя при каждом деплое приложения, а server.xml только при рестарте сервера. Описание ресурса в каталоге ${CATALINA_BASE} имеет приоритет над {Web pages}/META-INF/context.xml, расложенном в приложении. Поэтому для удобства разработки и тестирования JDBC ресурс следует размещать в приложении (с пустым или неправильным паролем, например "changeit"), а при выкладке данный ресурс будет настраиваться администратором в каталоге ${CATALINA_BASE}. </p>
      <h3 id="Try-with-resources">
        <a class="anchor" href="#Try-with-resources">Try-with-resources</a>
      </h3>
      <p>В Java 7 появилось удобное выражение "<a href="http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">try-with-resources</a>". Для того чтобы не писать блоки finally {} вызывающие метод close(), нужно писать блок try с ресурсом, например: </p>
      <p>try (Connection conn = dataSource.getConnection()) {</p>
      <p>try (Statement stmt = conn.createStatement()) {</p>
      <p>}</p>
      <p>}</p>
      <h2 id="rabota_s_maven">
        <a class="anchor" href="#rabota_s_maven">Работа с maven</a>
      </h2>
      <h3 id="kak_dobavit__jar_k_Maven_proektu">
        <a class="anchor" href="#kak_dobavit__jar_k_Maven_proektu">Как добавить jar к Maven проекту</a>
      </h3>
      <p>Если нужная библиотека не находиться в центральном Maven-репозитории, например cryptopro или jawin, ее можно установить в сетевой или локальный maven-репозиторий. </p>
      <p>Для установки стороннего jar-файла в сетевой maven-репозиторий используется команда: mvn -DartifactId=$artifactId -DgroupId=$groupId -Dversion=$version -Dpackaging=jar -Dfile=$jar -DgeneratePom=true -DrepositoryId=nexus-snapshots -Durl=http://devel.net.ilb.ru:28052/nexus/content/repositories/thirdparty deploy:deploy-file, где $artifactId, $groupId, $version - атрибуты артефакта, которые потом нужно будет указать в pom.xml, $jar - локальный путь к jar-файлу. При этом в ~/.m2/settings.xml должна быть запись с авторизационой информацией: </p>
      <pre>&lt;server&gt;</pre>
      <pre>&lt;id&gt;nexus-snapshots&lt;/id&gt;</pre>
      <pre>&lt;username&gt;deployment&lt;/username&gt;</pre>
      <pre>&lt;password&gt;deployment123&lt;/password&gt;</pre>
      <pre>&lt;/server&gt;</pre>
      <p>Установка в локальный maven-репозиторий, вариант с GUI:</p>
      <ol>
        <li>
          <p>Открыть диалог "Dependencies" -&gt; "Add Dependency" </p>
        </li>
        <li>
          <p>Заполнить поля groupId, artifactId и version (поискать примеры "имя библиотеки maven" в google, например "cryptopro maven" или ввести любые данные) </p>
        </li>
        <li>
          <p>Зависимость будет добавлена в pom.xml и появиться в группе Dependencies </p>
        </li>
        <li>
          <p>Щелкнуть правой кнопкой мыши по зависимости, выбрать "manually install artifact" и указать путь к jar. Jar установиться в локальный Maven-репозиторий </p>
        </li>
      </ol>
      <h3 id="release">
        <a class="anchor" href="#release">Релизы</a>
      </h3>
      <p>Два варианта создания релиза</p>
      <ol>
        <li>
          <p>В контекстном меню проекта Custom/Goals... </p>
          <ol>
            <li>
              <p>выполнить "release:prepare release:perform" (можно одной командой)</p>
            </li>
            <li>
              <p>Будет 3 вопроса по номерам версий, с предложенными ответами, скорее всего подойдут ответы по умолчанию. Например, идет разработка релиза "1.4-SNAPSHOT". </p>
              <ol>
                <li>
                  <p>Версия релиза будет "1.4" </p>
                </li>
                <li>
                  <p>Версия подставляемая к названию проекта в "tags" "1.4" </p>
                </li>
                <li>
                  <p>Новая версия разработки "1.5-SNAPSHOT" </p>
                </li>
              </ol>
              <p>Создастся ветка в "tags", выложиться релиз в репозиторий <a href="http://devel.net.ilb.ru:28052/nexus/content/repositories/releases/">http://devel.net.ilb.ru:28052/nexus/content/repositories/releases/</a></p>
            </li>
          </ol>
        </li>
        <li>
          <p>В Jenkins/Настройки проекта включить "Maven release build" </p>
          <ol>
            <li>
              <p>В раздел "Pre Steps" добавить команду "svn upgrade" (В Jenkins "Subversion Workspace Version" - 1.7, а плагин "Maven Release" использует svn установленный в системе, более новой версии) </p>
            </li>
            <li>
              <p>В меню проекта появиться пункт "Perform Maven Release" </p>
              <ol>
                <li>
                  <p>Выбрать номера версий (скорее всего подойдут предложенные) </p>
                </li>
                <li>
                  <p>Dry run only? - протестировать сборку (без фиксации, можно выполнять под пользователем Jenkins, то есть свою учетку не указывать) </p>
                </li>
                <li>
                  <p>После выполнения. Создастся ветка в "tags", выложиться релиз в репозиторий <a href="http://devel.net.ilb.ru:28052/nexus/content/repositories/releases/">http://devel.net.ilb.ru:28052/nexus/content/repositories/releases/</a></p>
                </li>
              </ol>
            </li>
          </ol>
        </li>
      </ol>
      <h3 id="kak_sdelat__branc_iz_reliza">
        <a class="anchor" href="#kak_sdelat__branc_iz_reliza">Как сделать бранч из релиза</a>
      </h3>
      <ol>
        <li>
          <p>Создать папку branches, если ее еще нет: svn mkdir https://svn.ilb.ru/repos/ics_service_web/branches/ Иначе будет ошибка E160013: File not found: transaction '90-2q', path '/branches/ics-service-web-1.11' </p>
        </li>
        <li>
          <p>Прописать в ~/.subversion/servers настройку  ssl-client-cert-password=&lt;password&gt; </p>
        </li>
        <li>
          <p>Перейти в локальный каталог tags/ics-service-web-1.11/ </p>
        </li>
        <li>
          <p>Выполнить команду mvn release:branch -DbranchName=ics-service-web-1.11 -DupdateBranchVersions=true -DupdateWorkingCopyVersions=false -DautoVersionSubmodules=true -DreleaseVersion=1.11.1-SNAPSHOT, будет создан бранч </p>
        </li>
        <li>
          <p>Примержить изменения из trunk </p>
        </li>
        <li>
          <p>Добавить бранч в jenkins, или изменить url в старом бранче </p>
        </li>
        <li>
          <p>Сделать релиз </p>
        </li>
      </ol>
      <h2 id="procee">
        <a class="anchor" href="#procee">Прочее</a>
      </h2>
      <h3 id="rabota_s_fajlov_mi_resursami_prilozenij">
        <a class="anchor" href="#rabota_s_fajlov_mi_resursami_prilozenij">Работа с файловыми ресурсами приложения</a>
      </h3>
      <p>Ресурс - это произвольный файл, например sql-запрос, изображение и др. Ресурсы maven-проекта располагаются в {Other Sources}/{src/main/resources}. При сборке war-файла содержимое данного каталога копируется в каталог WEB-INF/classes, таким образом данные ресурсы становяться доступны стандартным classloader-ом java. </p>
      <p>Для размещения ресурса необходимо сначала создать Java Package в каталоге {Other Sources}/{src/main/resources}, и внутри Java Package разместить файл ресурса. Если ресурс используется определенным классом, данный ресурс можно разместить в одноименном с классом package. Например, для того чтобы получить путь к ресурсу report.sql, распологающемуся в одноименном package класса: </p>
      <p>try (InputStream is = this.getClass().getClassLoader().getResourceAsStream(file)) { }</p>
      <h3 id="HTTP-avtorizacij">
        <a class="anchor" href="#HTTP-avtorizacij">HTTP-авторизация</a>
      </h3>
      <p>Для того чтобы включить HTTP-авторизацию в сервисе, необходимо в дескриптор приложения WEB-INF/web.xml добавить настройку </p>
      <pre>&lt;security-constraint&gt;</pre>
      <pre>&lt;display-name&gt;Tomcat Server Configuration Security Constraint&lt;/display-name&gt;</pre>
      <pre>&lt;web-resource-collection&gt;</pre>
      <pre>&lt;web-resource-name&gt;jparestresource&lt;/web-resource-name&gt;</pre>
      <pre>&lt;url-pattern&gt;/web/*&lt;/url-pattern&gt;</pre>
      <pre>&lt;/web-resource-collection&gt;</pre>
      <pre>&lt;auth-constraint&gt;</pre>
      <pre>&lt;role-name&gt;*&lt;/role-name&gt;</pre>
      <pre>&lt;/auth-constraint&gt;</pre>
      <pre>&lt;/security-constraint&gt;</pre>
      <pre>&lt;login-config&gt;</pre>
      <pre>&lt;auth-method&gt;BASIC&lt;/auth-method&gt;</pre>
      <pre>&lt;realm-name&gt;jparestresource&lt;/realm-name&gt;</pre>
      <pre>&lt;/login-config&gt;</pre>
      <pre>&lt;security-role&gt;</pre>
      <pre>&lt;description&gt;anyrole&lt;/description&gt;</pre>
      <pre>&lt;role-name&gt;*&lt;/role-name&gt;</pre>
      <pre>&lt;/security-role&gt;</pre>
      <p>В качестве role-name можно указать конкретную роль, трубуемую для совершения действия. Параметры login-config и security-role нужны на этапе разработки и тестирования (при запуске в локальном томкате без AJP и модуля tomcatrealm). Логин, пароль и группы пользователя для тестирования необходимо завести в ${CATALINA_BASE}/conf/tomcat-users.xml. В данном файле уже есть пример записи - пользователь ide. Данную запись необходимо скопировать, исправить атрибут <b>username</b> (пароль можно не менять) и заполнить атрибут <b>roles</b> необходимыми группами через запятую. При исполнении через apache (AJP) данные настройки игнорируются, авторизация и опеределние групп идет через LDAP (posix) См. <a href="../../../tomcatrealm">tomcatrealm</a>. </p>
      <p>Для того чтобы получить логин авторизованного пользователя и его группы необходимо в класс ресурса добавить свойство @Context private HttpServletRequest hsreq или воспользоваться ContainerRequestFilter.</p>
      <p>Пример: </p>
      <p>public class AuthorizationHandler implements ContainerRequestFilter {</p>
      <p>@Override</p>
      <p>public void filter(ContainerRequestContext requestContext) throws IOException {</p>
      <p>SecurityContext securityContext = requestContext.getSecurityContext();</p>
      <p>String userName = null;</p>
      <p>if (securityContext.getUserPrincipal() != null) {</p>
      <p>userName = securityContext.getUserPrincipal().getName();</p>
      <p>}</p>
      <p>}</p>
      <p>}</p>
      <h3 id="loggirovanie">
        <a class="anchor" href="#loggirovanie">Логгирование</a>
      </h3>
      <p><a href="#mavendep">Подключить зависимость</a> logback-classic или просто скопировать в pom.xml: </p>
      <pre>&lt;dependency&gt;</pre>
      <pre>&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</pre>
      <pre>&lt;artifactId&gt;logback-classic&lt;/artifactId&gt;</pre>
      <pre>&lt;version&gt;1.1.3&lt;/version&gt;</pre>
      <pre>&lt;/dependency&gt; </pre>
      <p>Подложить конфиг <a href="../../../testapp/trunk/testappjava/src/main/resources/logback.xml">logback.xml</a> в Other Sources -&gt; src/main/resources -&gt; default package. Для этого можно вызвать контекстное меню на каталоге src/main/resources, выбрать New -&gt; XML Document, ввести имя logback и в созданный файл вставить содержимое из примера. </p>
      <p>Использование: объявить в классе переменную: </p>
      <p>private static final Logger LOG = LoggerFactory.getLogger(DocumentsResourceImpl.class);</p>
      <p>и логгировать: </p>
      <p>LOG.info("TEST");</p>
      <h3 id="kak_sgenerirovat__WSDL_klienta">
        <a class="anchor" href="#kak_sgenerirovat__WSDL_klienta">Как сгенерировать WSDL клиента</a>
      </h3>
      <p>Шаг 1 - в меню File - New File выбрать категорию Web Services, в ней выбрать Web Service Client. </p>
      <p>Шаг 2: Указываем URL wsdl сервиса или локального файла и жмем Finish. </p>
      <p>Как сгенерировать код вызова WSDL сервиса: перетащить мышкой в Netbeans нужный сервис в текст программы: </p>
      <h2 id="FAQ">
        <a class="anchor" href="#FAQ">FAQ</a>
      </h2>
      <h3 id="v_brauzere_ne_vidn__izmenenij_xslt-sablona">
        <a class="anchor" href="#v_brauzere_ne_vidn__izmenenij_xslt-sablona">В браузере не видны изменения xslt-шаблона</a>
      </h3>
      <p>По-умолчанию, для повышения производительности, xslt шаблоны кэшируются в серверном трансформере. Для того что бы у разработчика в режиме deploy-on-save можно было сразу видеть изменения, в файле ${catalina.base}/conf/context.xml необходимо прописать параметр refreshTemplates=true</p>
      <h3 id="cto_delat___esli_resurs_otvecaet_404_ili_500">
        <a class="anchor" href="#cto_delat___esli_resurs_otvecaet_404_ili_500">Что делать, если ресурс отвечает 404 или 500</a>
      </h3>
      <p>Если все сделано по инструкции, а ресурс в браузере отвечает 404, 500 или другую ошибку, необходимо проверить, есть ли ошибки при старте приложения или в момент обращения к сервису. Это можно видеть во вкладке Output - Apache Tomcat. Если такой вкладки нет, нужно открыть блок Services (Ctrl-5), развернуть Server -&gt; Tomcat и выбрать View Server Output. В данном логе пишуться отладочные сообщения при старте сервлета и трейсы от исключений. Они бывают довольно длинные, но весь трейс изучать не нужно. В трейсе нужно найти знакомый класс (он будет подчеркнут ссылкой) и мышкой перейти в него для поиска причины ошибки. Если ни одного знакомого класса нет, нужно искать текст ошибки в Google. Во вкладке Output - Apache Tomcat Log можно видеть журнал приложения, если оно пользуется им (например через Logger). </p>
      <p>Если при открытии ресурса выходит ошибка "No root resource matching request path {} has been found", необходимо проверить наличие аннотации @Path у класса-ресурса (аннтация ресурса должна дублировать аннотацию интерфейса). </p>
      <h3 id="osibki_lokal_nogo_tomkata">
        <a class="anchor" href="#osibki_lokal_nogo_tomkata">Ошибки локального томката</a>
      </h3>
      <ol>
        <li>
          <p>Томкат долго стартует: возможно накопилось много задеплоеных приложений: Services -&gt; Servers -&gt; Apache Tomcat or TomEE -&gt; Web Applications -&gt; контекстное меню Undeploy на не нужных. </p>
        </li>
        <li>
          <p>Томкат долго деплоит приложение: возможно происходит утечка памяти от постоянного Deploy - нужно рестартануть томкат. </p>
        </li>
        <li>
          <p>Приложение запущено в режиме Debug но отладчик на точках останова не останавливается: рестартануть томкат. </p>
        </li>
        <li>
          <p>Томкат не останавливается: Services -&gt; Servers -&gt; Apache Tomcat or TomEE -&gt; контекстное меню Terminate (или через панель задач отфильтровать процесс java и завершить) </p>
        </li>
      </ol>
      <h2 id="fragment__koda">
        <a class="anchor" href="#fragment__koda">Фрагменты кода</a>
      </h2>
      <h3 id="rabota_so_strokami">
        <a class="anchor" href="#rabota_so_strokami">Работа со строками</a>
      </h3>
      <ol>
        <li>
          <p>Как прочитать InputStream в строку<br/>String result=new java.util.Scanner(inputStream,"UTF-8").useDelimiter("\\A").next()</p>
        </li>
      </ol>
      <h3 id="rabota_s_datami_java_8">
        <a class="anchor" href="#rabota_s_datami_java_8">Работа с датами java 8</a>
      </h3>
      <ol>
        <li>
          <p>
            <a href="smb://github.com/marschall/threeten-jpa#usage">JPA AttributeConverter</a>
          </p>
        </li>
        <li>
          <p>
            <a href="smb://github.com/migesok/jaxb-java-time-adapters">JAXB XmlAdapter</a>
          </p>
        </li>
      </ol>
      <p>Подключение JPA AttributeConverter через persistence.xml (есть так же вариант в orm.xml):</p>
      <pre>&lt;class&gt;com.github.marschall.threeten.jpa.LocalTimeConverter&lt;/class&gt;</pre>
      <pre>&lt;class&gt;com.github.marschall.threeten.jpa.LocalDateConverter&lt;/class&gt;</pre>
      <pre>&lt;class&gt;com.github.marschall.threeten.jpa.LocalDateTimeConverter&lt;/class&gt; </pre>
      <p>Подключение JAXB XmlAdapter через package-info.java:</p>
      <pre>@XmlJavaTypeAdapters({</pre>
      <pre>@XmlJavaTypeAdapter(type = LocalDate.class, value = LocalDateXmlAdapter.class),</pre>
      <pre>@XmlJavaTypeAdapter(type = LocalTime.class, value = LocalTimeXmlAdapter.class),</pre>
      <pre>@XmlJavaTypeAdapter(type = LocalDateTime.class, value = LocalDateTimeXmlAdapter.class)</pre>
      <pre>})</pre>
      <pre>@XmlSchemaTypes({</pre>
      <pre>@XmlSchemaType(name = "date", type = LocalDate.class),</pre>
      <pre>@XmlSchemaType(name = "time", type = LocalTime.class),</pre>
      <pre>@XmlSchemaType(name = "dateTime", type = LocalDateTime.class)</pre>
      <p>}) </p>
      <p>Подключение JAXB XmlAdapter через bindings.xml:</p>
      <p>&lt;xjc:javaType name="java.time.LocalDate" xmlType="xsd:date" adapter="com.migesok.jaxb.adapter.javatime.LocalDateXmlAdapter" /&gt;</p>
      <p>&lt;xjc:javaType name="java.time.LocalDateTime" xmlType="xsd:dateTime" adapter="com.migesok.jaxb.adapter.javatime.LocalDateTimeXmlAdapter" /&gt;</p>
      <p>&lt;xjc:javaType name="java.time.LocalTime" xmlType="xsd:time" adapter="com.migesok.jaxb.adapter.javatime.LocalTimeXmlAdapter" /&gt; </p>
    </div>
    <script type="text/javascript" src="/privilegedAPI/web/scripts/privilegedAPI.js"></script>
    <script type="text/javascript" src="/oooxhtml/oooxhtml.js"></script>
  </body>
</html>
